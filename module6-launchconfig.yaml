AWSTemplateFormatVersion: 2010-09-09
Description: Stack to create a launch configuration for wordpress EC2 servers.
Metadata:
  Authors:
    Description: Birender Pal (palbiren@amazon.com)
  License:
    Description: 'Copyright 2021 Amazon.com, Inc. and its affiliates. All Rights Reserved.
                  SPDX-License-Identifier: MIT-0'

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Database Parameters
      Parameters:
        - DatabaseName
        - DatabaseHostName
        - DatabaseUsername
        - DatabasePassword
    - Label:
        default: Wordpress Parameters
      Parameters:
        - Username
        - Password
    - Label:
        default: Other Parameters
      Parameters:
        - EC2ServerInstanceType
    ParameterLabels:
      DatabaseName:
        default: DB name
      DatabaseHostName:
        default: Database endpoint
      DatabaseUsername:
        default: Database User Name
      DatabasePassword:
        default: Database Password
      EC2ServerInstanceType:
        default: Instance Type
      Username:
        default: Wordpress admin username
      Password:
        default: Wordpress admin password


Parameters: 

  DatabaseName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS database name.
    Type: String
    Default: wordpress

  DatabaseHostName:
    Description: Amazon RDS DB Endpoint
    Type: String    

  DatabaseUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS username.
    ConstraintDescription: Must contain only alphanumeric characters (minimum 8; maximum 16).
    MaxLength: 16
    MinLength: 5
    Type: String

  DatabasePassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-    
    Description: The Amazon RDS password.
    MaxLength: 41
    MinLength: 6
    NoEcho: true
    Type: String
  
  Username:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: Wordpress admin username.
    ConstraintDescription: Must contain only alphanumeric characters (minimum 8; maximum 16).
    MaxLength: 16
    MinLength: 5
    Type: String

  Password:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-    
    Description: Wordpress admin password.
    MaxLength: 41
    MinLength: 6
    NoEcho: true
    Type: String


  EC2ServerInstanceType:
    Description: Amazon EC2 Instance Type
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - t3.small
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge


Mappings:
  RegionMap:
    ap-northeast-1:
      AMI: ami-da9e2cbc
    ap-northeast-2:
      AMI: ami-1196317f
    ap-south-1:
      AMI: ami-d5c18eba
    ap-southeast-1:
      AMI: ami-c63d6aa5
    ap-southeast-2:
      AMI: ami-ff4ea59d
    ca-central-1:
      AMI: ami-d29e25b6
    eu-central-1:
      AMI: ami-bf2ba8d0
    eu-west-1:
      AMI: ami-1a962263
    eu-west-2:
      AMI: ami-e7d6c983
    sa-east-1:
      AMI: ami-286f2a44
    us-east-1:
      AMI: ami-55ef662f
    us-east-2:
      AMI: ami-15e9c770
    us-west-1:
      AMI: ami-a51f27c5
    us-west-2:
      AMI: ami-bf4193c7

Resources: 

  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web instances
      GroupName: Wordpress Servers Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !ImportValue ALBSecurityGroupId
      VpcId:
        !ImportValue VPCID
      Tags:
      - Key: AppName
        Value: !Join [ '', [ 'ha-web-app' ] ]


  WordPressLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]      
      SecurityGroups:
      - Ref: WebTierSecurityGroup
      - !ImportValue EFSSecurityClientGroupID     
      - !ImportValue ElastiCacheClientSecurityGroupID
      - !ImportValue WordPressDatabaseClientSG
      InstanceType: !Ref EC2ServerInstanceType
      UserData: 
        "Fn::Base64":
          !Sub 
          - |
            #!/bin/bash -xe            
            DB_NAME=${DatabaseName}
            DB_HOSTNAME=${DatabaseHostName}
            DB_USERNAME=${DatabaseUsername}
            DB_PASSWORD=${DatabasePassword}
            WP_ADMIN=${Username}
            WP_PASSWORD=${Password}
            LB_HOSTNAME=${ALBDNSName}
            yum update -y
            yum install -y awslogs httpd24 mysql56 php70 php70-devel php7-pear php70-mysqlnd gcc-c++ php70-opcache
            mkdir -p /var/www/wordpress
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress
            
            ## create site config
            cat <<EOF >/etc/httpd/conf.d/wordpress.conf
            ServerName 127.0.0.1:80
            DocumentRoot /var/www/wordpress/wordpress
            <Directory /var/www/wordpress/wordpress>
              Options Indexes FollowSymLinks
              AllowOverride All
              Require all granted
            </Directory>
            EOF

            ## install cache client
            ln -s /usr/bin/pecl7 /usr/bin/pecl #just so pecl is available easily
            pecl7 install igbinary
            wget -P /tmp/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz
            cd /tmp
            tar -xf '/tmp/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz'
            cp '/tmp/artifact/amazon-elasticache-cluster-client.so' /usr/lib64/php/7.0/modules/
            if [ ! -f /etc/php-7.0.d/50-memcached.ini ]; then
                touch /etc/php-7.0.d/50-memcached.ini
            fi
            echo 'extension=igbinary.so;' >> /etc/php-7.0.d/50-memcached.ini
            echo 'extension=/usr/lib64/php/7.0/modules/amazon-elasticache-cluster-client.so;' >> /etc/php-7.0.d/50-memcached.ini

            ## install wordpress
            if [ ! -f /bin/wp/wp-cli.phar ]; then
              curl -o /bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
              chmod +x /bin/wp
            fi
            # make site directory
            if [ ! -d /var/www/wordpress/wordpress ]; then
              mkdir -p /var/www/wordpress/wordpress
              cd /var/www/wordpress/wordpress
              # install wordpress if not installed
              # use public alb host name if wp domain name was empty
              if ! $(wp core is-installed --allow-root); then
                  wp core download --version='4.9' --locale='en_GB' --allow-root
                  wp core config --dbname="$DB_NAME" --dbuser="$DB_USERNAME" --dbpass="$DB_PASSWORD" --dbhost="$DB_HOSTNAME" --dbprefix=wp_ --allow-root
                  wp core install --url="http://$LB_HOSTNAME" --title='Wordpress on AWS' --admin_user="$WP_ADMIN" --admin_password="$WP_PASSWORD" --admin_email='admin@example.com' --allow-root
                  wp plugin install w3-total-cache --allow-root
                  # sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_HOME', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/wordpress/wp-config.php
                  # sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_SITEURL', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/wordpress/wp-config.php
                  # enable HTTPS in wp-config.php if ACM Public SSL Certificate parameter was not empty
                  # sed -i \"/$table_prefix = 'wp_';/ a \\# No ACM Public SSL Certificate \" /var/www/wordpress/wordpress/wp-config.php
                  # set permissions of wordpress site directories
                  chown -R apache:apache /var/www/wordpress/wordpress
                  chmod u+wrx /var/www/wordpress/wordpress/wp-content/*
                  if [ ! -f /var/www/wordpress/wordpress/opcache-instanceid.php ]; then
                    wget -P /var/www/wordpress/wordpress/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php
                  fi
              fi
              RESULT=$?
              if [ $RESULT -eq 0 ]; then
                  touch /var/www/wordpress/wordpress/wordpress.initialized
              else
                  touch /var/www/wordpress/wordpress/wordpress.failed
              fi
            fi

            ## install opcache
            # create hidden opcache directory locally & change owner to apache
            if [ ! -d /var/www/.opcache ]; then                    
                mkdir -p /var/www/.opcache
            fi
            # enable opcache in /etc/php-7.0.d/10-opcache.ini
            sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php-7.0.d/10-opcache.ini
            sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php-7.0.d/10-opcache.ini
            # download opcache-instance.php to verify opcache status
            if [ ! -f /var/www/wordpress/wordpress/opcache-instanceid.php ]; then
                wget -P /var/www/wordpress/wordpress/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php
            fi

            chkconfig httpd on
            service httpd start
          - ElasticFileSystem: !ImportValue WPElasticFileSystemID
            ALBDNSName: !ImportValue ALBDnsName

Outputs:
  WPLaunchConfig:
    Description: 'Launch Config for Wordpress'
    Value:
      !Ref WordPressLaunchConfig
    Export:
      Name: WordPressLaunchConfig